import subprocess
import getopt
import sys
import shlex
import os

os.system("sudo apt-get update")
os.system("sudo apt-get install python3")
os.system("sudo apt-get install python3-pip")
os.system("sudo apt-get install pylint")
os.system("sudo apt-get install apt-transport-https ca-certificates curl software-properties-common")
os.system("curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -")
os.system("sudo add-apt-repository  \"deb [arch=amd64] https://download.docker.com/linux/ubuntu  $(lsb_release -cs) stable\"")
os.system("sudo apt-get update")
os.system("sudo apt-get -y install docker-ce")
os.system("sudo chmod 777 /var/run/docker.sock")
os.system("pip3 install docker")

import docker
#client = docker.from_env()
#python_file = ""
#dockerfilefolder = ""

try:
	opts, args = getopt.getopt(sys.argv[1:],"f:d:",["pythonfile=","dockerfilefolder="])
	print(opts)
	for opt,arg in opts:
		if opt in ("-f", "--pythonfile"):
			python_file = arg
		elif opt in ("-d", "--dockerfilefolder"):
			dockerfilefolder = arg
except getopt.GetoptError:
	print('This tool is a scanner for open source vulnerabilities in containerized Python applications.')
	print('Install pylint on your system by running $sudo apt-get install pylint.')
	print('To use it, copy the following lines into your Dockerfile.')
	print('ADD https://get.aquasec.com/microscanner .')
	print('RUN chmod +x microscanner')
	print('RUN ./microscanner ZmJiNGE2YmEwNDU5')
	print('scanner.py -f <pythonfile> -d <dockerfilefolder>')
	sys.exit(2)

command = shlex.split("pylint "+python_file)
try:
	output = subprocess.check_output(command, stderr=subprocess.STDOUT).decode()
	success = True 
except subprocess.CalledProcessError as e:
	output = e.output.decode()
	success = False
print("STATIC CODE ANALYSIS REPORT")
print("-------------------------------------------------------------------------")
print(output)
print("-------------------------------------------------------------------------")

command = shlex.split("sudo docker build -t "+dockerfilefolder+":latest "+dockerfilefolder)
try:
	output = subprocess.check_output(command, stderr=subprocess.STDOUT).decode()
	success = True 
except subprocess.CalledProcessError as e:
	output = e.output.decode()
	success = False
print("BUILD PHASE")
print("-------------------------------------------------------------------------")
print(output)
print("-------------------------------------------------------------------------")
command = "curl -s https://ci-tools.anchore.io/inline_scan-v0.6.0 | bash -s -- -f -d "+dockerfilefolder+"/Dockerfile "+dockerfilefolder+":latest"
os.system(command)
print("IMAGE ANALYSED SUCCESSFULLY") 
exit()

